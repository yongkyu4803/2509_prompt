'use client';

import { useEffect } from 'react';
import { X, Bell, CheckCircle, AlertTriangle, Info } from 'lucide-react';

interface AdminNoticeModalProps {
  isOpen: boolean;
  onClose: () => void;
}

interface Notice {
  id: string;
  type: 'info' | 'success' | 'warning';
  title: string;
  content: string;
  date: string;
}

const notices: Notice[] = [
  {
    id: '1',
    type: 'success',
    title: 'ÏÉàÎ°úÏö¥ Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä',
    content: `üìù ÏÉà Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§:
‚Ä¢ Î≥¥ÎèÑÏûêÎ£å: Ïñ∏Î°† Î≥¥ÎèÑÏö© ÏΩòÌÖêÏ∏† ÏûëÏÑ±
‚Ä¢ Ïù¥ÏäàÎ∂ÑÏÑù: ÌòÑÏïà Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏ ÏûëÏÑ±  
‚Ä¢ ÏßàÏùòÏÑúÏûëÏÑ±: Í≥µÏãù Î¨∏ÏÑú Î∞è ÏßàÏùòÏÑú ÏûëÏÑ±

ÎçîÏö± Ï≤¥Í≥ÑÏ†ÅÏù∏ ÌîÑÎ°¨ÌîÑÌä∏ Í¥ÄÎ¶¨Î•º Í≤ΩÌóòÌï¥Î≥¥ÏÑ∏Ïöî!`,
    date: '2024.01.15'
  },
  {
    id: '2',
    type: 'info',
    title: 'ÏãúÏä§ÌÖú ÏóÖÎç∞Ïù¥Ìä∏ ÏïàÎÇ¥',
    content: `üîß ÏãúÏä§ÌÖú Í∞úÏÑ†ÏÇ¨Ìï≠:
‚Ä¢ Í≤ÄÏÉâ ÏÑ±Îä• Ìñ•ÏÉÅ (2Î∞∞ Îπ®ÎùºÏßê)
‚Ä¢ ÌîÑÎ°¨ÌîÑÌä∏ Î≥µÏÇ¨ Í∏∞Îä• Í∞úÏÑ†
‚Ä¢ Î™®Î∞îÏùº ÏÇ¨Ïö©ÏÑ± ÏµúÏ†ÅÌôî
‚Ä¢ Ï¶êÍ≤®Ï∞æÍ∏∞ ÎèôÍ∏∞Ìôî ÏïàÏ†ïÌôî

ÏóÖÎç∞Ïù¥Ìä∏Îêú Í∏∞Îä•Îì§ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.`,
    date: '2024.01.10'
  },
  {
    id: '3',
    type: 'warning',
    title: 'Ï†ïÍ∏∞ Ï†êÍ≤Ä ÏòàÏ†ï',
    content: `‚è∞ Ï†ïÍ∏∞ ÏãúÏä§ÌÖú Ï†êÍ≤Ä ÏòàÏ†ï:
‚Ä¢ ÏùºÏãú: 2024ÎÖÑ 1Ïõî 20Ïùº (ÌÜ†) 02:00~04:00
‚Ä¢ ÏÜåÏöîÏãúÍ∞Ñ: ÏïΩ 2ÏãúÍ∞Ñ
‚Ä¢ Ï†êÍ≤ÄÎÇ¥Ïö©: ÏÑúÎ≤Ñ ÏÑ±Îä• ÏµúÏ†ÅÌôî Î∞è Î≥¥Ïïà ÏóÖÎç∞Ïù¥Ìä∏

Ï†êÍ≤Ä ÏãúÍ∞Ñ ÎèôÏïà ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïù¥ Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§.`,
    date: '2024.01.08'
  }
];

const getNoticeIcon = (type: Notice['type']) => {
  switch (type) {
    case 'success':
      return <CheckCircle className="w-5 h-5 text-green-600" />;
    case 'warning':
      return <AlertTriangle className="w-5 h-5 text-amber-600" />;
    case 'info':
    default:
      return <Info className="w-5 h-5 text-blue-600" />;
  }
};

const getNoticeColorClasses = (type: Notice['type']) => {
  switch (type) {
    case 'success':
      return 'border-green-200 bg-green-50';
    case 'warning':
      return 'border-amber-200 bg-amber-50';
    case 'info':
    default:
      return 'border-blue-200 bg-blue-50';
  }
};

export default function AdminNoticeModal({ isOpen, onClose }: AdminNoticeModalProps) {
  // ESC ÌÇ§Î°ú Î™®Îã¨ Îã´Í∏∞
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      {/* Backdrop */}
      <div 
        className="fixed inset-0 bg-black bg-opacity-25 transition-opacity"
        onClick={onClose}
      />
      
      {/* Modal */}
      <div className="flex min-h-full items-center justify-center p-4 text-center">
        <div className="w-full max-w-2xl transform overflow-hidden rounded-2xl bg-white text-left align-middle shadow-xl transition-all">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-purple-100 rounded-xl flex items-center justify-center">
                <Bell className="w-5 h-5 text-purple-600" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900">
                  Í¥ÄÎ¶¨Ïûê Í≥µÏßÄÏÇ¨Ìï≠
                </h3>
                <p className="text-sm text-gray-500">
                  ÏµúÏã† ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Ï§ëÏöî ÏïàÎÇ¥ÏÇ¨Ìï≠
                </p>
              </div>
            </div>
            <button
              type="button"
              className="rounded-lg p-2 text-gray-400 hover:text-gray-500 hover:bg-gray-100 transition-colors"
              onClick={onClose}
            >
              <X className="h-5 w-5" />
            </button>
          </div>

          {/* Content */}
          <div className="max-h-96 overflow-y-auto p-6">
            <div className="space-y-4">
              {notices.map((notice) => (
                <div
                  key={notice.id}
                  className={`border rounded-xl p-4 ${getNoticeColorClasses(notice.type)}`}
                >
                  <div className="flex items-start gap-3 mb-3">
                    <div className="flex-shrink-0 mt-0.5">
                      {getNoticeIcon(notice.type)}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-semibold text-gray-900">
                          {notice.title}
                        </h4>
                        <span className="text-xs text-gray-500 bg-white px-2 py-1 rounded-full">
                          {notice.date}
                        </span>
                      </div>
                      <div className="text-sm text-gray-700 leading-relaxed whitespace-pre-line">
                        {notice.content}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Footer */}
          <div className="flex justify-end p-6 border-t border-gray-200 bg-gray-50">
            <button
              type="button"
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              onClick={onClose}
            >
              ÌôïÏù∏
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}